//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""FlightControls"",
            ""id"": ""00acde53-cc11-4df2-8f44-5bcd41c69048"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""2bd254b2-723a-4b8e-b3c4-61f7cddc1456"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Ascend"",
                    ""type"": ""Button"",
                    ""id"": ""2f967b57-57b2-4fe6-a36a-4ca746c622d7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Descend"",
                    ""type"": ""Button"",
                    ""id"": ""4345f104-23ed-4189-838b-c5a834ec4455"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""a5644f00-2491-4750-96d9-e55c0bad11dc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""de328dda-575c-4e45-8f7f-7fdec56354c3"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""21d1a125-46b9-4818-b149-ff8cea5a4e79"",
                    ""path"": ""<Keyboard>/#(W)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a2ad1c53-f256-4edc-995c-afcda1d25c7b"",
                    ""path"": ""<Keyboard>/#(S)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a2e7a124-608f-46cd-83b1-b3b037211a4d"",
                    ""path"": ""<Keyboard>/#(A)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c2c6998d-f843-48f1-bfcc-50dfa03483a0"",
                    ""path"": ""<Keyboard>/#(D)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4b1ca09c-4c03-4b9e-9f2b-ae4b25ff1880"",
                    ""path"": ""<Keyboard>/#(Q)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ascend"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4022ec67-04a5-4c2c-a17d-dc7399f54d61"",
                    ""path"": ""<Keyboard>/#(E)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Descend"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5f488458-bbca-4b47-824f-a50829b0e452"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // FlightControls
        m_FlightControls = asset.FindActionMap("FlightControls", throwIfNotFound: true);
        m_FlightControls_Move = m_FlightControls.FindAction("Move", throwIfNotFound: true);
        m_FlightControls_Ascend = m_FlightControls.FindAction("Ascend", throwIfNotFound: true);
        m_FlightControls_Descend = m_FlightControls.FindAction("Descend", throwIfNotFound: true);
        m_FlightControls_Look = m_FlightControls.FindAction("Look", throwIfNotFound: true);
    }

    ~@PlayerInputActions()
    {
        UnityEngine.Debug.Assert(!m_FlightControls.enabled, "This will cause a leak and performance issues, PlayerInputActions.FlightControls.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // FlightControls
    private readonly InputActionMap m_FlightControls;
    private List<IFlightControlsActions> m_FlightControlsActionsCallbackInterfaces = new List<IFlightControlsActions>();
    private readonly InputAction m_FlightControls_Move;
    private readonly InputAction m_FlightControls_Ascend;
    private readonly InputAction m_FlightControls_Descend;
    private readonly InputAction m_FlightControls_Look;
    public struct FlightControlsActions
    {
        private @PlayerInputActions m_Wrapper;
        public FlightControlsActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_FlightControls_Move;
        public InputAction @Ascend => m_Wrapper.m_FlightControls_Ascend;
        public InputAction @Descend => m_Wrapper.m_FlightControls_Descend;
        public InputAction @Look => m_Wrapper.m_FlightControls_Look;
        public InputActionMap Get() { return m_Wrapper.m_FlightControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FlightControlsActions set) { return set.Get(); }
        public void AddCallbacks(IFlightControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_FlightControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FlightControlsActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Ascend.started += instance.OnAscend;
            @Ascend.performed += instance.OnAscend;
            @Ascend.canceled += instance.OnAscend;
            @Descend.started += instance.OnDescend;
            @Descend.performed += instance.OnDescend;
            @Descend.canceled += instance.OnDescend;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
        }

        private void UnregisterCallbacks(IFlightControlsActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Ascend.started -= instance.OnAscend;
            @Ascend.performed -= instance.OnAscend;
            @Ascend.canceled -= instance.OnAscend;
            @Descend.started -= instance.OnDescend;
            @Descend.performed -= instance.OnDescend;
            @Descend.canceled -= instance.OnDescend;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
        }

        public void RemoveCallbacks(IFlightControlsActions instance)
        {
            if (m_Wrapper.m_FlightControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFlightControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_FlightControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FlightControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FlightControlsActions @FlightControls => new FlightControlsActions(this);
    public interface IFlightControlsActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnAscend(InputAction.CallbackContext context);
        void OnDescend(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
    }
}
